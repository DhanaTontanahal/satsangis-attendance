[{"/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/index.js":"1","/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/App.js":"2","/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/reportWebVitals.js":"3","/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/search_bar/search.js":"4","/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/search_bar/data/stocks.js":"5","/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/search_bar/src/AutoCompleteSearchBox.js":"6"},{"size":514,"mtime":1608713057709,"results":"7","hashOfConfig":"8"},{"size":528,"mtime":1608707593803,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608707593807,"results":"10","hashOfConfig":"8"},{"size":949,"mtime":1608713286864,"results":"11","hashOfConfig":"8"},{"size":1890351,"mtime":1608712037075,"results":"12","hashOfConfig":"8"},{"size":7090,"mtime":1608713303988,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1nf7geq",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/index.js",[],["29","30"],"/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/App.js",[],"/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/reportWebVitals.js",[],"/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/search_bar/search.js",["31"],"import React from 'react';\nimport search from './search.svg';\nimport './App.css';\nimport AutoCompleteSearchBox from './src/AutoCompleteSearchBox';\nimport {stocksData} from './data/stocks'\n\nfunction App() {\n\n  const symbols = stocksData.map((stockObj) =>{\n    return stockObj[\"symbol\"]\n  });\n\n  const onClick = (suggestion) =>{\n    alert(suggestion[\"name\"])\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <AutoCompleteSearchBox\n        placeHolderSearchLabel={\"Search..\"} \n        primaryIndex={\"symbol\"} \n        secondaryIndex={\"name\"}\n        showSecondarySearchCriterion={true}\n        secondarySearchClassName=\"secondarySearchClassName\"\n        tertiaryIndex={\"price\"}\n        showTertiarySearchCriterion={true}\n        tertiarySearchClassName=\"tertiarySearchClassName\"\n        suggestions={stocksData}\n        onClick={onClick}\n        showSearchBtn={true}\n        searchImg={search}\n        />\n      \n    </div>\n  );\n}\n\nexport default App;\n","/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/search_bar/data/stocks.js",[],"/Users/suhavangupta/Documents/MySpace/Github/satsangis-attendance/src/search_bar/src/AutoCompleteSearchBox.js",["32","33"],"import React, { Component } from 'react'\nimport styled from 'styled-components';\n\nconst StyledNoSuggsDiv = styled.div`\n    color: #999;\n    padding: 0.5rem;\n`;\n\nconst StyledContainer = styled.div`\n \n position: relative;\n\n input{\n  width:100%;\n  height:45px;\n  border:1px solid pink;\n  border-radius: 25px;\n  padding:0px 5px 0 10px;\n  font-size: 0.75rem;\n  font-family: \"Montserrat\";\n  margin:5px 5px 5px 5px;\n}\n\n input:focus{\n  outline: none !important;\n}\n\n button{\n  position:absolute;\n  right:-5px;\n  top:15px;\n  border: none;\n  background: none;\n}\n img{\n  border-style: none;\n  vertical-align: middle;\n}\n\n\n\n`;\nconst StyledUl = styled.ul`\n\n  border: 1px solid #999;\n  border-top-width: 0;\n  list-style: none;\n  margin-top: 0;\n  width:100%;\n  overflow-y: auto;\n  padding-left: 0;\n  color:${props => props.fontColor};\n\n\nli {\n  padding: 0.5rem;\n  list-style-type: none;\n  list-style: none;\n}\n\n.suggestion-active,li:hover \n{\n  cursor: pointer;\n  font-weight: 700;\n  background-color: aliceblue;\n  border:0px solid gray;\n  padding:4px 4px 4px 4px;\n  margin:5px 5px 5px 5px;\n  font-weight: bold;\n  background-color: coral;\n\n\n}\n\nli:not(:last-of-type) {\n  border-bottom: 1px solid #999;\n}\n\n`;\n\n\nconst defaultProps = {\n    placeHolderSearchLabel:\"Search\",\n    showSearchBtn:false,\n    styles: {\n        ulDiv:{\n            color:\"blue\"\n        },\n        searchImage: {\n            width: \"24\",\n            height: \"24\",\n            alt: \"Search\"\n        },\n        container: {\n            width: \"400px\",\n            margin: \"0 auto\"\n        },\n    }\n}\n\n\nclass AutoCompleteSearchBox extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            filteredSuggestions: [],\n            activeSuggestions: 0,\n            showSuggestions: false,\n            userInput: \"\"\n        }\n\n        this.onChange = this.onChange.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onClick = this.onClick.bind(this);\n    }\n\n\n    onChange(e){\n        // console.log(e.target.value)\n        const { suggestions, primaryIndex } = this.props;\n        const userSearchInput = e.target.value;\n\n        const filteredSuggestions = suggestions.filter((suggestion) => {\n            return (suggestion[primaryIndex].toLowerCase().indexOf(userSearchInput.toLowerCase()) > -1);\n        });\n\n        // console.log(filteredSuggestions);\n\n        this.setState({\n            filteredSuggestions: filteredSuggestions,\n            activeSuggestions: 0,\n            showSuggestions: true,\n            userInput: userSearchInput\n        })\n\n    }\n\n    onKeyDown(e) {\n\n        const { activeSuggestions, filteredSuggestions } = this.state;\n\n        if (e.keyCode === 13) {\n\n            this.setState({\n                showSuggestions: false,\n                userInput: filteredSuggestions[activeSuggestions][this.props.primaryIndex]\n            })\n\n            this.props.onClick(filteredSuggestions[activeSuggestions]);\n        }\n        //user has clicked down arrow\n        else if (e.keyCode == 40) {\n\n            if (activeSuggestions - 1 === filteredSuggestions.length) {\n                return;\n            }\n\n            this.setState({ activeSuggestions: activeSuggestions + 1 });\n        }\n        //user has clicked up arrow\n        else if (e.keyCode == 38) {\n            if (activeSuggestions === 0) {\n                return;\n            }\n            this.setState({ activeSuggestions: activeSuggestions - 1 });\n        }\n\n\n\n    }\n\n    onClick() {\n        console.log(this.state.userInput);\n        this.props.onClick(this.state.filteredSuggestions[this.state.activeSuggestions]);\n    }\n\n    render() {\n\n        const {\n            state: {\n                filteredSuggestions,\n                activeSuggestions,\n                showSuggestions,\n                userInput\n            }\n        } = this;\n\n        const { primaryIndex, secondaryIndex, tertiaryIndex, styles } = this.props;\n\n        let autoCompleteSuggestions;\n\n        if (showSuggestions && userInput) {\n            if (filteredSuggestions.length) {\n                autoCompleteSuggestions = (\n                    <StyledUl fontColor={styles.ulDiv.color}>\n                        {\n                            filteredSuggestions.map((suggestion, index) => {\n\n                                let className;\n\n                                if (index === activeSuggestions) {\n                                    className = \"suggestion-active\";\n                                }\n\n                                return (\n                                    <li\n                                        className={className}\n                                        key={index}>\n                                        {suggestion[primaryIndex]}\n                                        <br />\n                                        <span>\n                                            {\n                                                this.props.showSecondarySearchCriterion ?\n                                                    <small>{suggestion[secondaryIndex]}</small> :\n                                                    null\n                                            }\n                                            {\n                                                this.props.showTertiarySearchCriterion ?\n                                                    <small className={this.props.tertiarySearchClassName}>{suggestion[tertiaryIndex]}</small> :\n                                                    null\n\n                                            }\n                                        </span>\n\n                                    </li>\n                                )\n                            })\n\n                        }\n                    </StyledUl>\n                )\n            }\n            else\n            {\n               \n                    autoCompleteSuggestions = (\n                        <StyledNoSuggsDiv>\n                          <em>No suggestions, you're on your own!</em>\n                        </StyledNoSuggsDiv>\n                      );\n                \n            }\n        }\n        return (\n\n            <div style={styles.container}>\n                <StyledContainer>\n                    <input\n                        placeholder={this.props.placeHolderSearchLabel}\n                        type=\"text\"\n                        onChange={this.onChange}\n                        onKeyDown={this.onKeyDown}\n                        value={userInput}\n                    />\n                    {\n                        this.props.showSearchBtn?\n                        <button onClick={this.onClick}>\n                        <img src={this.props.searchImg} width={styles.searchImage.width} height={styles.searchImage.height} alt={styles.searchImage.alt} />\n                    </button>:null\n                    }\n                    \n                </StyledContainer>\n                {autoCompleteSuggestions}\n            </div>\n        )\n    }\n}\n\nAutoCompleteSearchBox.defaultProps = defaultProps;\nexport default AutoCompleteSearchBox\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":9,"column":9,"nodeType":"40","messageId":"41","endLine":9,"endColumn":16},{"ruleId":"42","severity":1,"message":"43","line":153,"column":28,"nodeType":"44","messageId":"45","endLine":153,"endColumn":30},{"ruleId":"42","severity":1,"message":"43","line":162,"column":28,"nodeType":"44","messageId":"45","endLine":162,"endColumn":30},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'symbols' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]